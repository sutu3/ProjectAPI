import { is, join, pipe, replace } from 'ramda';
import sortAndSerialize from './sortAndSerialize';
export function collapseChildren(node) {
  if (node.children) {
    node._children = node.children;

    node._children.forEach(collapseChildren);

    node.children = null;
  }
}
export function expandChildren(node) {
  if (node._children) {
    node.children = node._children;
    node.children.forEach(expandChildren);
    node._children = null;
  }
}
export function toggleChildren(node) {
  if (node.children) {
    node._children = node.children;
    node.children = null;
  } else if (node._children) {
    node.children = node._children;
    node._children = null;
  }

  return node;
}
export function visit(parent, visitFn, childrenFn) {
  if (!parent) {
    return;
  }

  visitFn(parent);
  var children = childrenFn(parent);

  if (children) {
    var count = children.length;

    for (var i = 0; i < count; i++) {
      visit(children[i], visitFn, childrenFn);
    }
  }
}
export function getNodeGroupByDepthCount(rootNode) {
  var nodeGroupByDepthCount = [1];

  var traverseFrom = function traverseFrom(node) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (!node.children || node.children.length === 0) {
      return 0;
    }

    if (nodeGroupByDepthCount.length <= depth + 1) {
      nodeGroupByDepthCount.push(0);
    }

    nodeGroupByDepthCount[depth + 1] += node.children.length;
    node.children.forEach(function (childNode) {
      traverseFrom(childNode, depth + 1);
    });
  };

  traverseFrom(rootNode);
  return nodeGroupByDepthCount;
}
export function getTooltipString(node, i, _ref) {
  var _ref$indentationSize = _ref.indentationSize,
      indentationSize = _ref$indentationSize === void 0 ? 4 : _ref$indentationSize;
  if (!is(Object, node)) return '';
  var spacer = join('&nbsp;&nbsp;');
  var cr2br = replace(/\n/g, '<br/>');
  var spaces2nbsp = replace(/\s{2}/g, spacer(new Array(indentationSize)));
  var json2html = pipe(sortAndSerialize, cr2br, spaces2nbsp);
  var children = node.children || node._children;
  if (typeof node.value !== 'undefined') return json2html(node.value);
  if (typeof node.object !== 'undefined') return json2html(node.object);
  if (children && children.length) return "childrenCount: ".concat(children.length);
  return 'empty';
}