{"ast":null,"code":"// const init=[\n//         {id:1,name:'Learnn Yoga',completed:false,priority:'Medium'},\n//         {id:2,name:'Learnn Redux',completed:true,priority:'Low'},\n//         {id:3,name:'Learnn React',completed:false,priority:'Hight'},\n//     ]\n\n// const TodoListSlice=(state=init,action)=>{\n//     switch(action.type)\n//     {\n//         case 'todoList/addTodo':\n//             return [\n//                     ...state,\n//                     action.payload\n//                 ]\n//         case 'todoList/changeCompleted':\n//             return state.map((el)=>el.id===action.payload ?{...el,completed:!el.completed}:el)\n//         default:\n//             return state;\n//     }\n// }\n// export default TodoListSlice\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst TodoListSlice1 = createSlice({\n  name: \"todoList\",\n  initialState: {\n    status: \"idle\",\n    todo: []\n  },\n  reducers: {\n    addTodo: (state, action) => {\n      console.log(state);\n      state.todo.push(action.payload);\n    },\n    changeCompleted: (state, action) => {\n      console.log(state.todo);\n      return state.todo.map(el => el.id === action.payload ? {\n        ...el,\n        completed: !el.completed\n      } : el);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(FetchTodo.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(FetchTodo.fulfilled, (state, action) => {\n      state.todo = action.payload;\n      state.status = \"idle\";\n    }).addCase(AddNewTodo.pending, (state, action) => {\n      state.todo = action.payload;\n    }).addCase(addToDos.F);\n  }\n});\nexport const FetchTodo = createAsyncThunk(\"todo/fetchTodo\", async () => {\n  const res = await fetch(\"/api/todo\");\n  const data = await res.json();\n  console.log(\"1\");\n  console.log({\n    data\n  });\n  return data.todo;\n});\nexport const AddNewTodo = createAsyncThunk(\"todo/AddNewTodo\", async NewTodo => {\n  const res = await fetch('/api/todo', {\n    method: \"POST\",\n    body: JSON.stringify(NewTodo)\n  });\n  const data = await res.json();\n  console.log({\n    data\n  });\n  addToDos(data);\n});\nexport default TodoListSlice1;\nexport function addToDos(todo) {\n  return function addTodoThunk(dispatch, getState) {\n    console.log(getState());\n    console.log(todo);\n    todo.name = 'Đại đã Update dữ liệu';\n    dispatch(TodoListSlice1.actions.addTodo(todo));\n    console.log('Update', getState());\n  };\n}","map":{"version":3,"names":["createAsyncThunk","createSlice","TodoListSlice1","name","initialState","status","todo","reducers","addTodo","state","action","console","log","push","payload","changeCompleted","map","el","id","completed","extraReducers","builder","addCase","FetchTodo","pending","fulfilled","AddNewTodo","addToDos","F","res","fetch","data","json","NewTodo","method","body","JSON","stringify","addTodoThunk","dispatch","getState","actions"],"sources":["D:/react/todolist/src/Component/TodoList/TodoListSlide.js"],"sourcesContent":["// const init=[\r\n//         {id:1,name:'Learnn Yoga',completed:false,priority:'Medium'},\r\n//         {id:2,name:'Learnn Redux',completed:true,priority:'Low'},\r\n//         {id:3,name:'Learnn React',completed:false,priority:'Hight'},\r\n//     ]\r\n\r\n// const TodoListSlice=(state=init,action)=>{\r\n//     switch(action.type)\r\n//     {\r\n//         case 'todoList/addTodo':\r\n//             return [\r\n//                     ...state,\r\n//                     action.payload\r\n//                 ]\r\n//         case 'todoList/changeCompleted':\r\n//             return state.map((el)=>el.id===action.payload ?{...el,completed:!el.completed}:el)\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n// export default TodoListSlice\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nconst TodoListSlice1 = createSlice({\r\n  name: \"todoList\",\r\n  initialState: { status: \"idle\", todo: [] },\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      console.log(state)\r\n      state.todo.push(action.payload);\r\n    },\r\n    changeCompleted: (state, action) => {\r\n      console.log(state.todo)\r\n      return state.todo.map((el) =>\r\n        el.id === action.payload ? { ...el, completed: !el.completed } : el\r\n      );\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(FetchTodo.pending, (state, action) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(FetchTodo.fulfilled, (state, action) => {\r\n        state.todo = action.payload;\r\n        state.status = \"idle\";\r\n      })\r\n      .addCase(AddNewTodo.pending, (state, action) => {\r\n        state.todo = action.payload;\r\n      })\r\n      .addCase(addToDos.F)\r\n  },\r\n});\r\nexport const FetchTodo = createAsyncThunk(\"todo/fetchTodo\", async () => {\r\n  const res = await fetch(\"/api/todo\");\r\n  const data = await res.json();\r\n  console.log(\"1\");\r\n  console.log({ data });\r\n  return data.todo;\r\n});\r\nexport const AddNewTodo = createAsyncThunk(\"todo/AddNewTodo\",async (NewTodo) => {\r\n    const res = await fetch('/api/todo', {\r\n      method: \"POST\",\r\n      body: JSON.stringify(NewTodo),\r\n    });\r\n    const data = await res.json();\r\n    console.log( {data} );\r\n    addToDos(data);\r\n  }\r\n);\r\nexport default TodoListSlice1;\r\n\r\nexport function addToDos(todo){\r\n    return function addTodoThunk(dispatch,getState){\r\n        console.log(getState())\r\n        console.log(todo)\r\n        todo.name='Đại đã Update dữ liệu'\r\n        dispatch(TodoListSlice1.actions.addTodo(todo))\r\n        console.log('Update', getState())\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}