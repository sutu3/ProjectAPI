'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.getLastActionId = getLastActionId;
exports.getCurrentActionId = getCurrentActionId;
exports.createMonitorState = createMonitorState;

var _getInspectedState = require('./getInspectedState');

var _getInspectedState2 = _interopRequireDefault(_getInspectedState);

var _DiffPatcher = require('../DiffPatcher');

var _DiffPatcher2 = _interopRequireDefault(_DiffPatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getLastActionId(props) {
  return props.stagedActionIds[props.stagedActionIds.length - 1];
}

function getCurrentActionId(props, monitorState) {
  return monitorState.selectedActionId === null ? getLastActionId(props) : monitorState.selectedActionId;
}

function getFromState(actionIndex, stagedActionIds, computedStates, monitorState) {
  var startActionId = monitorState.startActionId;

  if (startActionId === null) {
    return actionIndex > 0 ? computedStates[actionIndex - 1] : null;
  }
  var fromStateIdx = stagedActionIds.indexOf(startActionId - 1);
  if (fromStateIdx === -1) fromStateIdx = 0;
  return computedStates[fromStateIdx];
}

function createMonitorState(props, monitorState) {
  var supportImmutable = props.supportImmutable;
  var computedStates = props.computedStates;
  var stagedActionIds = props.stagedActionIds;
  var actions = props.actionsById;
  var inspectedStatePath = monitorState.inspectedStatePath;
  var inspectedActionPath = monitorState.inspectedActionPath;

  var currentActionId = getCurrentActionId(props, monitorState);
  var currentAction = actions[currentActionId] && actions[currentActionId].action;

  var actionIndex = stagedActionIds.indexOf(currentActionId);
  var fromState = getFromState(actionIndex, stagedActionIds, computedStates, monitorState);
  var toState = computedStates[actionIndex];
  var error = toState && toState.error;

  var fromInspectedState = !error && fromState && (0, _getInspectedState2.default)(fromState.state, inspectedStatePath, supportImmutable);
  var toInspectedState = !error && toState && (0, _getInspectedState2.default)(toState.state, inspectedStatePath, supportImmutable);
  var delta = !error && fromState && toState && _DiffPatcher2.default.diff(fromInspectedState, toInspectedState);

  return (0, _extends3.default)({}, monitorState, {
    delta: delta,
    currentActionId: currentActionId,
    nextState: toState && (0, _getInspectedState2.default)(toState.state, inspectedStatePath, false),
    action: (0, _getInspectedState2.default)(currentAction, inspectedActionPath, false),
    error: error
  });
}