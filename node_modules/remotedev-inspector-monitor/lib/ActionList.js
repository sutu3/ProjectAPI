'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactDragula = require('react-dragula');

var _reactDragula2 = _interopRequireDefault(_reactDragula);

var _ActionListRow = require('./ActionListRow');

var _ActionListRow2 = _interopRequireDefault(_ActionListRow);

var _ActionListHeader = require('./ActionListHeader');

var _ActionListHeader2 = _interopRequireDefault(_ActionListHeader);

var _function = require('react-pure-render/function');

var _function2 = _interopRequireDefault(_function);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getTimestamps(actions, actionIds, actionId) {
  var idx = actionIds.indexOf(actionId);
  var prevActionId = actionIds[idx - 1];

  return {
    current: actions[actionId].timestamp,
    previous: idx ? actions[prevActionId].timestamp : 0
  };
}

var ActionList = function (_Component) {
  (0, _inherits3.default)(ActionList, _Component);

  function ActionList() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ActionList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ActionList.__proto__ || (0, _getPrototypeOf2.default)(ActionList)).call.apply(_ref, [this].concat(args))), _this), _this.shouldComponentUpdate = _function2.default, _this.getRef = function (node) {
      _this.node = node;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ActionList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var node = this.node;
      if (!node) {
        this.scrollDown = true;
      } else if (this.props.lastActionId !== nextProps.lastActionId) {
        var scrollTop = node.scrollTop,
            offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;

        this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 50;
      } else {
        this.scrollDown = false;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.scrollDown = true;
      this.scrollToBottom();

      if (!this.props.draggableActions) return;
      var container = _reactDom2.default.findDOMNode(this.refs.rows);
      this.drake = (0, _reactDragula2.default)([container], {
        copy: false,
        copySortSource: false,
        mirrorContainer: container,
        accepts: function accepts(el, target, source, sibling) {
          return !sibling || parseInt(sibling.getAttribute('data-id'));
        },
        moves: function moves(el, source, handle) {
          return parseInt(el.getAttribute('data-id')) && handle.className.indexOf('selectorButton') !== 0;
        }
      }).on('drop', function (el, target, source, sibling) {
        var beforeActionId = _this2.props.actionIds.length;
        if (sibling && sibling.className.indexOf('gu-mirror') === -1) {
          beforeActionId = parseInt(sibling.getAttribute('data-id'));
        }
        var actionId = parseInt(el.getAttribute('data-id'));
        _this2.props.onReorderAction(actionId, beforeActionId);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.drake) this.drake.destroy();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.scrollToBottom();
    }
  }, {
    key: 'scrollToBottom',
    value: function scrollToBottom() {
      if (this.scrollDown && this.node) {
        this.node.scrollTop = this.node.scrollHeight;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          styling = _props.styling,
          actions = _props.actions,
          actionIds = _props.actionIds,
          isWideLayout = _props.isWideLayout,
          onToggleAction = _props.onToggleAction,
          skippedActionIds = _props.skippedActionIds,
          selectedActionId = _props.selectedActionId,
          startActionId = _props.startActionId,
          _onSelect = _props.onSelect,
          onSearch = _props.onSearch,
          searchValue = _props.searchValue,
          currentActionId = _props.currentActionId,
          hideMainButtons = _props.hideMainButtons,
          hideActionButtons = _props.hideActionButtons,
          onCommit = _props.onCommit,
          onSweep = _props.onSweep,
          onJumpToState = _props.onJumpToState;

      var lowerSearchValue = searchValue && searchValue.toLowerCase();
      var filteredActionIds = searchValue ? actionIds.filter(function (id) {
        return actions[id].action.type.toLowerCase().indexOf(lowerSearchValue) !== -1;
      }) : actionIds;

      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({ key: 'actionList'
        }, styling(['actionList', isWideLayout && 'actionListWide'], isWideLayout)),
        _react2.default.createElement(_ActionListHeader2.default, { styling: styling,
          onSearch: onSearch,
          onCommit: onCommit,
          onSweep: onSweep,
          hideMainButtons: hideMainButtons,
          hasSkippedActions: skippedActionIds.length > 0,
          hasStagedActions: actionIds.length > 1 }),
        _react2.default.createElement(
          'div',
          (0, _extends3.default)({}, styling('actionListRows'), { ref: this.getRef }),
          filteredActionIds.map(function (actionId) {
            return _react2.default.createElement(_ActionListRow2.default, { key: actionId,
              styling: styling,
              actionId: actionId,
              isInitAction: !actionId,
              isSelected: startActionId !== null && actionId >= startActionId && actionId <= selectedActionId || actionId === selectedActionId,
              isInFuture: actionIds.indexOf(actionId) > actionIds.indexOf(currentActionId),
              onSelect: function onSelect(e) {
                return _onSelect(e, actionId);
              },
              timestamps: getTimestamps(actions, actionIds, actionId),
              action: actions[actionId].action,
              onToggleClick: function onToggleClick() {
                return onToggleAction(actionId);
              },
              onJumpClick: function onJumpClick() {
                return onJumpToState(actionId);
              },
              onCommitClick: function onCommitClick() {
                return onCommit(actionId);
              },
              hideActionButtons: hideActionButtons,
              isSkipped: skippedActionIds.indexOf(actionId) !== -1 });
          })
        )
      );
    }
  }]);
  return ActionList;
}(_react.Component);

exports.default = ActionList;