import _defineProperty from "@babel/runtime/helpers/defineProperty";
import isArray from 'lodash/isArray';
import isPlainObject from 'lodash/isPlainObject';
import mapValues from 'lodash/mapValues';

function visit(parent, visitFn, childrenFn) {
  if (!parent) return;
  visitFn(parent);
  var children = childrenFn(parent);

  if (children) {
    var count = children.length;

    for (var i = 0; i < count; i++) {
      visit(children[i], visitFn, childrenFn);
    }
  }
}

function getNode(tree, key) {
  var node = null;
  visit(tree, function (d) {
    if (d.name === key) {
      node = d;
    }
  }, function (d) {
    return d.children;
  });
  return node;
}

export function map2tree( // eslint-disable-next-line @typescript-eslint/ban-types
root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    name: options.key || 'state',
    children: []
  };

  // eslint-disable-next-line @typescript-eslint/ban-types
  if (!isPlainObject(root) && root && !root.toJS) {
    return {};
  }

  var _options$key = options.key,
      rootNodeKey = _options$key === void 0 ? 'state' : _options$key,
      _options$pushMethod = options.pushMethod,
      pushMethod = _options$pushMethod === void 0 ? 'push' : _options$pushMethod;
  var currentNode = getNode(tree, rootNodeKey);

  if (currentNode === null) {
    return {};
  }

  mapValues( // eslint-disable-next-line @typescript-eslint/ban-types
  root && root.toJS ? // eslint-disable-next-line @typescript-eslint/ban-types
  root.toJS() : // eslint-disable-next-line @typescript-eslint/ban-types
  root, // eslint-disable-next-line @typescript-eslint/ban-types
  function (maybeImmutable, key) {
    var value = maybeImmutable && maybeImmutable.toJS ? maybeImmutable.toJS() : maybeImmutable;
    var newNode = {
      name: key
    };

    if (isArray(value)) {
      newNode.children = [];

      for (var i = 0; i < value.length; i++) {
        newNode.children[pushMethod](_defineProperty({
          name: "".concat(key, "[").concat(i, "]")
        }, isPlainObject(value[i]) ? 'object' : 'value', value[i]));
      }
    } else if (isPlainObject(value)) {
      newNode.children = [];
    } else {
      newNode.value = value;
    }

    currentNode.children[pushMethod](newNode);
    map2tree(value, {
      key: key,
      pushMethod: pushMethod
    }, tree);
  });
  return tree;
}