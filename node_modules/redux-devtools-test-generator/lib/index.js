'use strict';

exports.__esModule = true;
exports.fromPath = undefined;
exports.compare = compare;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _javascriptStringify = require('javascript-stringify');

var _javascriptStringify2 = _interopRequireDefault(_javascriptStringify);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _jsan = require('jsan');

var _jsan2 = _interopRequireDefault(_jsan);

var _simpleDiff = require('simple-diff');

var _simpleDiff2 = _interopRequireDefault(_simpleDiff);

var _es6template = require('es6template');

var _es6template2 = _interopRequireDefault(_es6template);

var _remotedevMonitorComponents = require('remotedev-monitor-components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var style = {
  display: 'flex',
  flexFlow: 'column nowrap',
  height: '100%'
};

var fromPath = exports.fromPath = function fromPath(path) {
  return path.map(function (a) {
    return typeof a === 'string' ? '.' + a : '[' + a + ']';
  }).join('');
};

function getState(s, defaultValue) {
  if (!s) return defaultValue;
  return JSON.parse(_jsan2.default.stringify(s.state));
}

function compare(s1, s2, cb, defaultValue) {
  var paths = []; // Already processed
  function generate(_ref) {
    var type = _ref.type;
    var newPath = _ref.newPath;
    var newValue = _ref.newValue;
    var newIndex = _ref.newIndex;

    var curState = void 0;
    var path = fromPath(newPath);

    if (type === 'remove-item' || type === 'move-item') {
      if (paths.length && paths.indexOf(path) !== -1) return;
      paths.push(path);
      var v = _objectPath2.default.get(s2.state, newPath);
      curState = v.length;
      path += '.length';
    } else if (type === 'add-item') {
      generate({ type: 'move-item', newPath: newPath });
      path += '[' + newIndex + ']';
      curState = (0, _javascriptStringify2.default)(newValue);
    } else {
      curState = (0, _javascriptStringify2.default)(newValue);
    }

    // console.log(`expect(store${path}).toEqual(${curState});`);
    cb({ path: path, curState: curState });
  }

  (0, _simpleDiff2.default)(getState(s1, defaultValue), getState(s2, defaultValue) /* , { idProp: '*' } */).forEach(generate);
}

var TestGenerator = function (_Component) {
  _inherits(TestGenerator, _Component);

  function TestGenerator() {
    _classCallCheck(this, TestGenerator);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  TestGenerator.prototype.getMethod = function getMethod(action) {
    var type = action.type;
    if (type[0] === '┗') type = type.substr(1).trim();
    var args = action.arguments;
    if (args) args = args.map(function (arg) {
      return (0, _javascriptStringify2.default)(arg);
    }).join(',');else args = '';
    return type + '(' + args + ')';
  };

  TestGenerator.prototype.getAction = function getAction(action) {
    if (action.type === '@@INIT') return '{}';
    return (0, _javascriptStringify2.default)(action);
  };

  TestGenerator.prototype.generateTest = function generateTest() {
    var _props = this.props;
    var computedStates = _props.computedStates;
    var actions = _props.actions;
    var selectedActionId = _props.selectedActionId;
    var startActionId = _props.startActionId;
    var isVanilla = _props.isVanilla;
    var name = _props.name;


    if (!actions || !computedStates || computedStates.length < 1) return '';

    var _props2 = this.props;
    var wrap = _props2.wrap;
    var assertion = _props2.assertion;
    var dispatcher = _props2.dispatcher;
    var indentation = _props2.indentation;

    if (typeof assertion === 'string') assertion = _es6template2.default.compile(assertion);
    if (typeof wrap === 'string') {
      var ident = wrap.match(/\n.+\$\{assertions}/);
      if (ident) indentation = ident[0].length - 13;
      wrap = _es6template2.default.compile(wrap);
    }
    if (typeof dispatcher === 'string') dispatcher = _es6template2.default.compile(dispatcher);

    var space = '';
    if (indentation) space = Array(indentation).join(' ');

    var r = '';
    var isFirst = true;
    var i = void 0;
    if (startActionId !== null) i = startActionId;else if (selectedActionId !== null) i = selectedActionId;else i = computedStates.length - 1;
    var startIdx = i > 0 ? i : 1;

    var addAssertions = function addAssertions(_ref2) {
      var path = _ref2.path;
      var curState = _ref2.curState;

      r += space + assertion({ path: path, curState: curState }) + '\n';
    };

    while (actions[i]) {
      if (!isVanilla || /^┗?\s?[a-zA-Z0-9_@.\[\]-]+?$/.test(actions[i].action.type)) {
        if (isFirst) isFirst = false;else r += space;
        if (!isVanilla || actions[i].action.type[0] !== '@') {
          r += dispatcher({
            action: !isVanilla ? this.getAction(actions[i].action) : this.getMethod(actions[i].action),
            prevState: i > 0 ? (0, _javascriptStringify2.default)(computedStates[i - 1].state) : undefined
          }) + '\n';
        }
        if (!isVanilla) {
          addAssertions({ path: '', curState: (0, _javascriptStringify2.default)(computedStates[i].state) });
        } else {
          compare(computedStates[i - 1], computedStates[i], addAssertions, isVanilla && {});
        }
      }
      i++;
      if (i > selectedActionId) break;
    }

    r = r.trim();
    if (wrap) {
      if (!isVanilla) r = wrap({ name: name, assertions: r });else {
        r = wrap({
          name: /^[a-zA-Z0-9_-]+?$/.test(name) ? name : 'Store',
          actionName: (selectedActionId === null || selectedActionId > 0) && actions[startIdx] ? actions[startIdx].action.type.replace(/[^a-zA-Z0-9_-]+/, '') : 'should return the initial state',
          initialState: (0, _javascriptStringify2.default)(computedStates[startIdx - 1].state),
          assertions: r
        });
      }
    }
    return r;
  };

  TestGenerator.prototype.render = function render() {
    var testComponent = void 0;
    var warning = void 0;
    if (!this.props.assertion) {
      warning = this.props.noTestWarning || _react2.default.createElement(
        'div',
        { style: { margin: '10px' } },
        'No template for tests specified.'
      );
    } else {
      var code = this.generateTest();

      if (!this.props.useCodemirror) {
        testComponent = _react2.default.createElement('textarea', {
          style: { padding: '10px', width: '100%', height: '100%' },
          defaultValue: code
        });
      } else {
        testComponent = _react2.default.createElement(_remotedevMonitorComponents.Editor, { value: code, theme: this.props.theme });
      }

      if (this.props.startActionId === null) {
        warning = _react2.default.createElement(
          'div',
          {
            style: { padding: '10px', backgroundColor: '#247b98' }
          },
          'Hold ',
          _react2.default.createElement(
            'b',
            null,
            'SHIFT'
          ),
          ' key to select more actions.'
        );
      }
    }

    var header = this.props.header;

    return _react2.default.createElement(
      'div',
      { style: style },
      header,
      testComponent,
      warning
    );
  };

  return TestGenerator;
}(_react.Component);

exports.default = TestGenerator;


TestGenerator.propTypes = {
  name: _react.PropTypes.string,
  isVanilla: _react.PropTypes.bool,
  computedStates: _react.PropTypes.array,
  actions: _react.PropTypes.object,
  selectedActionId: _react.PropTypes.number,
  startActionId: _react.PropTypes.number,
  wrap: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  dispatcher: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  assertion: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  useCodemirror: _react.PropTypes.bool,
  indentation: _react.PropTypes.number,
  theme: _react.PropTypes.string,
  header: _react.PropTypes.element,
  noTestWarning: _react.PropTypes.element
};

TestGenerator.defaultProps = {
  selectedActionId: null,
  startActionId: null
};