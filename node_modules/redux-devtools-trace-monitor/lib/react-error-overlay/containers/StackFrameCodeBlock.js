"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _CodeBlock = _interopRequireDefault(require("../components/CodeBlock"));

var _css = require("../utils/dom/css");

var _absolutifyCaret = require("../utils/dom/absolutifyCaret");

var _generateAnsiHTML = _interopRequireDefault(require("../utils/generateAnsiHTML"));

var _codeFrame = require("@babel/code-frame");

var _reduxDevtoolsThemes = require("redux-devtools-themes");

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// import type { ScriptLine } from '../utils/stack-frame';

/*
type StackFrameCodeBlockPropsType = {|
  lines: ScriptLine[],
  lineNum: number,
  columnNum: ?number,
  contextSize: number,
  main: boolean,
|};

// Exact type workaround for spread operator.
// See: https://github.com/facebook/flow/issues/2405
type Exact<T> = $Shape<T>;
*/
function StackFrameCodeBlock(props
/* : Exact<StackFrameCodeBlockPropsType> */
) {
  var lines = props.lines,
      lineNum = props.lineNum,
      columnNum = props.columnNum,
      contextSize = props.contextSize,
      main = props.main;
  var sourceCode = [];
  var whiteSpace = Infinity;
  lines.forEach(function (e) {
    var text = e.content;
    var m = text.match(/^\s*/);

    if (text === '') {
      return;
    }

    if (m && m[0]) {
      whiteSpace = Math.min(whiteSpace, m[0].length);
    } else {
      whiteSpace = 0;
    }
  });
  lines.forEach(function (e) {
    var text = e.content;
    var line = e.lineNumber;

    if (isFinite(whiteSpace)) {
      text = text.substring(whiteSpace);
    }

    sourceCode[line - 1] = text;
  });
  var ansiHighlight = (0, _codeFrame.codeFrameColumns)(sourceCode.join('\n'), {
    start: {
      line: lineNum,
      column: columnNum == null ? 0 : columnNum - (isFinite(whiteSpace) ? whiteSpace : 0)
    }
  }, {
    forceColor: true,
    linesAbove: contextSize,
    linesBelow: contextSize
  });
  var htmlHighlight = (0, _generateAnsiHTML["default"])(ansiHighlight);
  var code = document.createElement('code');
  code.innerHTML = htmlHighlight;
  (0, _absolutifyCaret.absolutifyCaret)(code);
  var ccn = code.childNodes; // eslint-disable-next-line

  oLoop: for (var index = 0; index < ccn.length; ++index) {
    var node = ccn[index];
    var ccn2 = node.childNodes;

    for (var index2 = 0; index2 < ccn2.length; ++index2) {
      var lineNode = ccn2[index2];
      var text = lineNode.innerText;

      if (text == null) {
        continue;
      }

      if (text.indexOf(' ' + lineNum + ' |') === -1) {
        continue;
      } // $FlowFixMe


      (0, _css.applyStyles)(node, {
        'background-color': main ? _reduxDevtoolsThemes.nicinabox.base02 : _reduxDevtoolsThemes.nicinabox.base01
      }); // eslint-disable-next-line

      break oLoop;
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_CodeBlock["default"], {
    main: main,
    codeHTML: code.innerHTML
  });
}

var _default = StackFrameCodeBlock;
exports["default"] = _default;