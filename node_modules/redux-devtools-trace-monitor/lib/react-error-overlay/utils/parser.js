"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parseError;
exports["default"] = void 0;

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _stackFrame = _interopRequireDefault(require("./stack-frame"));

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var regexExtractLocation = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;

function extractLocation(token) {
  return regexExtractLocation.exec(token).slice(1).map(function (v) {
    var p = Number(v);

    if (!isNaN(p)) {
      return p;
    }

    return v;
  });
}

var regexValidFrame_Chrome = /^\s*(at|in)\s.+(:\d+)/;
var regexValidFrame_FireFox = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;

function parseStack(stack) {
  var frames = stack.filter(function (e) {
    return regexValidFrame_Chrome.test(e) || regexValidFrame_FireFox.test(e);
  }).map(function (e) {
    if (regexValidFrame_FireFox.test(e)) {
      // Strip eval, we don't care about it
      var isEval = false;

      if (/ > (eval|Function)/.test(e)) {
        e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ':$1');
        isEval = true;
      }

      var data = e.split(/[@]/g);
      var last = data.pop();
      return (0, _construct2["default"])(_stackFrame["default"], [data.join('@') || (isEval ? 'eval' : null)].concat((0, _toConsumableArray2["default"])(extractLocation(last))));
    } else {
      // Strip eval, we don't care about it
      if (e.indexOf('(eval ') !== -1) {
        e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
      }

      if (e.indexOf('(at ') !== -1) {
        e = e.replace(/\(at /, '(');
      }

      var _data = e.trim().split(/\s+/g).slice(1);

      var _last = _data.pop();

      return (0, _construct2["default"])(_stackFrame["default"], [_data.join(' ') || null].concat((0, _toConsumableArray2["default"])(extractLocation(_last))));
    }
  });
  return frames;
}
/**
 * Turns an <code>Error</code>, or similar object, into a set of <code>StackFrame</code>s.
 * @alias parse
 */


function parseError(error) {
  if (error == null) {
    throw new Error('You cannot pass a null object.');
  }

  if (typeof error === 'string') {
    return parseStack(error.split('\n'));
  }

  if (Array.isArray(error)) {
    return parseStack(error);
  }

  if (typeof error.stack === 'string') {
    return parseStack(error.stack.split('\n'));
  }

  throw new Error('The error you provided does not contain a stack trace.');
}

var _default = parseError;
exports["default"] = _default;