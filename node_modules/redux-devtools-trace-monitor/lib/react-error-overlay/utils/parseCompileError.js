"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _anser = _interopRequireDefault(require("anser"));

var filePathRegex = /^\.(\/[^/\n ]+)+\.[^/\n ]+$/;
var lineNumberRegexes = [// Babel syntax errors
// Based on syntax error formating of babylon parser
// https://github.com/babel/babylon/blob/v7.0.0-beta.22/src/parser/location.js#L19
/^.*\((\d+):(\d+)\)$/, // ESLint errors
// Based on eslintFormatter in react-dev-utils
/^Line (\d+):.+$/]; // Based on error formatting of webpack
// https://github.com/webpack/webpack/blob/v3.5.5/lib/Stats.js#L183-L217

function parseCompileError(message) {
  var lines = message.split('\n');
  var fileName = '';
  var lineNumber = 0;
  var colNumber = 0;

  for (var i = 0; i < lines.length; i++) {
    var line = _anser["default"].ansiToText(lines[i]).trim();

    if (!line) {
      continue;
    }

    if (!fileName && line.match(filePathRegex)) {
      fileName = line;
    }

    var k = 0;

    while (k < lineNumberRegexes.length) {
      var match = line.match(lineNumberRegexes[k]);

      if (match) {
        lineNumber = parseInt(match[1], 10); // colNumber starts with 0 and hence add 1

        colNumber = parseInt(match[2], 10) + 1 || 1;
        break;
      }

      k++;
    }

    if (fileName && lineNumber) {
      break;
    }
  }

  return fileName && lineNumber ? {
    fileName: fileName,
    lineNumber: lineNumber,
    colNumber: colNumber
  } : null;
}

var _default = parseCompileError;
exports["default"] = _default;