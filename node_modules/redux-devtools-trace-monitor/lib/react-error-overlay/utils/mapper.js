"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = map;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _stackFrame = _interopRequireDefault(require("./stack-frame"));

var _getSourceMap = require("./getSourceMap");

var _getLinesAround = require("./getLinesAround");

var _settlePromise = require("settle-promise");

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Enhances a set of <code>StackFrame</code>s with their original positions and code (when available).
 * @param {StackFrame[]} frames A set of <code>StackFrame</code>s which contain (generated) code positions.
 * @param {number} [contextLines=3] The number of lines to provide before and after the line specified in the <code>StackFrame</code>.
 */
function map(_x) {
  return _map.apply(this, arguments);
}

function _map() {
  _map = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(frames) {
    var contextLines,
        cache,
        files,
        _args2 = arguments;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            contextLines = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 3;
            cache = {};
            files = [];
            frames.forEach(function (frame) {
              var fileName = frame.fileName;

              if (fileName == null) {
                return;
              }

              if (files.indexOf(fileName) !== -1) {
                return;
              }

              files.push(fileName);
            });
            _context2.next = 6;
            return (0, _settlePromise.settle)(files.map( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(fileName) {
                var fileSource, map;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return fetch(fileName).then(function (r) {
                          return r.text();
                        });

                      case 2:
                        fileSource = _context.sent;
                        _context.next = 5;
                        return (0, _getSourceMap.getSourceMap)(fileName, fileSource);

                      case 5:
                        map = _context.sent;
                        cache[fileName] = {
                          fileSource: fileSource,
                          map: map
                        };

                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 6:
            return _context2.abrupt("return", frames.map(function (frame) {
              var functionName = frame.functionName,
                  fileName = frame.fileName,
                  lineNumber = frame.lineNumber,
                  columnNumber = frame.columnNumber;

              var _ref2 = cache[fileName] || {},
                  map = _ref2.map,
                  fileSource = _ref2.fileSource;

              if (map == null || lineNumber == null) {
                return frame;
              }

              var _map$getOriginalPosit = map.getOriginalPosition(lineNumber, columnNumber),
                  source = _map$getOriginalPosit.source,
                  line = _map$getOriginalPosit.line,
                  column = _map$getOriginalPosit.column;

              var originalSource = source == null ? [] : map.getSource(source) || [];
              return new _stackFrame["default"](functionName, fileName, lineNumber, columnNumber, (0, _getLinesAround.getLinesAround)(lineNumber, contextLines, fileSource), functionName, source, line, column, (0, _getLinesAround.getLinesAround)(line, contextLines, originalSource));
            }));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _map.apply(this, arguments);
}

var _default = map;
exports["default"] = _default;