"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ScriptLine = exports.StackFrame = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** A container holding a script line. */
var ScriptLine =
/** The line number of this line of source. */

/** The content (or value) of this line of source. */

/** Whether or not this line should be highlighted. Particularly useful for error reporting with context. */
function ScriptLine(lineNumber, content) {
  var highlight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  (0, _classCallCheck2["default"])(this, ScriptLine);
  (0, _defineProperty2["default"])(this, "lineNumber", void 0);
  (0, _defineProperty2["default"])(this, "content", void 0);
  (0, _defineProperty2["default"])(this, "highlight", void 0);
  this.lineNumber = lineNumber;
  this.content = content;
  this.highlight = highlight;
};
/**
 * A representation of a stack frame.
 */


exports.ScriptLine = ScriptLine;

var StackFrame = /*#__PURE__*/function () {
  function StackFrame() {
    var functionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var lineNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var columnNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var scriptCode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var sourceFunctionName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var sourceFileName = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var sourceLineNumber = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var sourceColumnNumber = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
    var sourceScriptCode = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
    (0, _classCallCheck2["default"])(this, StackFrame);
    (0, _defineProperty2["default"])(this, "functionName", void 0);
    (0, _defineProperty2["default"])(this, "fileName", void 0);
    (0, _defineProperty2["default"])(this, "lineNumber", void 0);
    (0, _defineProperty2["default"])(this, "columnNumber", void 0);
    (0, _defineProperty2["default"])(this, "_originalFunctionName", void 0);
    (0, _defineProperty2["default"])(this, "_originalFileName", void 0);
    (0, _defineProperty2["default"])(this, "_originalLineNumber", void 0);
    (0, _defineProperty2["default"])(this, "_originalColumnNumber", void 0);
    (0, _defineProperty2["default"])(this, "_scriptCode", void 0);
    (0, _defineProperty2["default"])(this, "_originalScriptCode", void 0);

    if (functionName && functionName.indexOf('Object.') === 0) {
      functionName = functionName.slice('Object.'.length);
    }

    if ( // Chrome has a bug with inferring function.name:
    // https://github.com/facebook/create-react-app/issues/2097
    // Let's ignore a meaningless name we get for top-level modules.
    functionName === 'friendlySyntaxErrorLabel' || functionName === 'exports.__esModule' || functionName === '<anonymous>' || !functionName) {
      functionName = null;
    }

    this.functionName = functionName;
    this.fileName = fileName;
    this.lineNumber = lineNumber;
    this.columnNumber = columnNumber;
    this._originalFunctionName = sourceFunctionName;
    this._originalFileName = sourceFileName;
    this._originalLineNumber = sourceLineNumber;
    this._originalColumnNumber = sourceColumnNumber;
    this._scriptCode = scriptCode;
    this._originalScriptCode = sourceScriptCode;
  }
  /**
   * Returns the name of this function.
   */


  (0, _createClass2["default"])(StackFrame, [{
    key: "getFunctionName",
    value: function getFunctionName() {
      return this.functionName || '(anonymous function)';
    }
    /**
     * Returns the source of the frame.
     * This contains the file name, line number, and column number when available.
     */

  }, {
    key: "getSource",
    value: function getSource() {
      var str = '';

      if (this.fileName != null) {
        str += this.fileName + ':';
      }

      if (this.lineNumber != null) {
        str += this.lineNumber + ':';
      }

      if (this.columnNumber != null) {
        str += this.columnNumber + ':';
      }

      return str.slice(0, -1);
    }
    /**
     * Returns a pretty version of this stack frame.
     */

  }, {
    key: "toString",
    value: function toString() {
      var functionName = this.getFunctionName();
      var source = this.getSource();
      return "".concat(functionName).concat(source ? " (".concat(source, ")") : '');
    }
  }]);
  return StackFrame;
}();

exports.StackFrame = StackFrame;
var _default = StackFrame;
exports["default"] = _default;