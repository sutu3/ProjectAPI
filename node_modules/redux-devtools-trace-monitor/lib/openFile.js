"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = openFile;
var isFF = navigator.userAgent.indexOf('Firefox') !== -1;

function openResource(fileName, lineNumber, stackFrame) {
  var adjustedLineNumber = Math.max(lineNumber - 1, 0);
  chrome.devtools.panels.openResource(fileName, adjustedLineNumber, function (result) {
    //console.log("openResource callback args: ", callbackArgs);
    if (result.isError) {
      var finalFileName = stackFrame.fileName,
          finalLineNumber = stackFrame.lineNumber;

      var _adjustedLineNumber = Math.max(finalLineNumber - 1, 0);

      chrome.devtools.panels.openResource(finalFileName, _adjustedLineNumber, function ()
      /* result */
      {// console.log("openResource result: ", result);
      });
    }
  });
}

function openAndCloseTab(url) {
  chrome.tabs.create({
    url: url
  }, function (tab) {
    var removeTab = function removeTab() {
      chrome.windows.onFocusChanged.removeListener(removeTab);

      if (tab && tab.id) {
        chrome.tabs.remove(tab.id, function () {
          // eslint-disable-next-line no-console
          if (chrome.runtime.lastError) console.log(chrome.runtime.lastError);else if (chrome.devtools && chrome.devtools.inspectedWindow) {
            chrome.tabs.update(chrome.devtools.inspectedWindow.tabId, {
              active: true
            });
          }
        });
      }
    };

    if (chrome.windows) chrome.windows.onFocusChanged.addListener(removeTab);
  });
}

function openInIframe(url) {
  var iframe = document.createElement('iframe');
  iframe.src = url;
  iframe.style = 'display:none';
  document.body.appendChild(iframe);
  setTimeout(function () {
    return iframe.parentNode.removeChild(iframe);
  }, 3000);
}

function openInEditor(editor, path, stackFrame) {
  var projectPath = path.replace(/\/$/, '');
  var file = stackFrame._originalFileName || stackFrame.finalFileName || stackFrame.fileName || '';
  var filePath = /^https?:\/\//.test(file) ? file.replace(/^https?:\/\/[^/]*/, '') : file.replace(/^\w+:\/\//, '');
  filePath = filePath.replace(/^\/~\//, '/node_modules/');
  var line = stackFrame._originalLineNumber || stackFrame.lineNumber || '0';
  var column = stackFrame._originalColumnNumber || stackFrame.columnNumber || '0';
  var url;

  switch (editor) {
    case 'vscode':
    case 'code':
      url = "vscode://file/".concat(projectPath).concat(filePath, ":").concat(line, ":").concat(column);
      break;

    case 'atom':
      url = "atom://core/open/file?filename=".concat(projectPath).concat(filePath, "&line=").concat(line, "&column=").concat(column);
      break;

    case 'webstorm':
    case 'phpstorm':
    case 'idea':
      url = "".concat(editor, "://open?file=").concat(projectPath).concat(filePath, "&line=").concat(line, "&column=").concat(column);
      break;

    default:
      // sublime, emacs, macvim, textmate + custom like https://github.com/eclemens/atom-url-handler
      url = "".concat(editor, "://open/?url=file://").concat(projectPath).concat(filePath, "&line=").concat(line, "&column=").concat(column);
  }

  if (process.env.NODE_ENV === 'development') console.log(url); // eslint-disable-line no-console

  if (chrome.devtools && !isFF) {
    if (chrome.tabs) openAndCloseTab(url);else window.open(url);
  } else {
    openInIframe(url);
  }
}

function openFile(fileName, lineNumber, stackFrame) {
  if (process.env.NODE_ENV === 'development') // eslint-disable-next-line no-console
    console.log(fileName, lineNumber, stackFrame);
  if (!chrome || !chrome.storage) return; // TODO: Pass editor settings for using outside of browser extension

  var storage = isFF ? chrome.storage.local : chrome.storage.sync || chrome.storage.local;
  storage.get(['useEditor', 'editor', 'projectPath'], function (_ref) {
    var useEditor = _ref.useEditor,
        editor = _ref.editor,
        projectPath = _ref.projectPath;

    if (useEditor && projectPath && typeof editor === 'string' && /^\w{1,30}$/.test(editor)) {
      openInEditor(editor.toLowerCase(), projectPath, stackFrame);
    } else {
      if (chrome.devtools && chrome.devtools.panels && chrome.devtools.panels.openResource) {
        openResource(fileName, lineNumber, stackFrame);
      } else if (chrome.runtime && (chrome.runtime.openOptionsPage || isFF)) {
        if (chrome.devtools && isFF) {
          chrome.devtools.inspectedWindow.eval('confirm("Set the editor to open the file in?")', function (result) {
            if (!result) return;
            chrome.runtime.sendMessage({
              type: 'OPEN_OPTIONS'
            });
          });
        } else if (confirm('Set the editor to open the file in?')) {
          chrome.runtime.openOptionsPage();
        }
      }
    }
  });
}