'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.getActionsArray = getActionsArray;
exports.evalAction = evalAction;

var _getParams = require('get-params');

var _getParams2 = _interopRequireDefault(_getParams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function flatTree(obj) {
  var namespace = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var functions = [];
  Object.keys(obj).forEach(function (key) {
    var prop = obj[key];
    if (typeof prop === 'function') {
      functions.push({
        name: namespace + (key || prop.name || 'anonymous'),
        func: prop,
        args: (0, _getParams2.default)(prop)
      });
    } else if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
      functions = functions.concat(flatTree(prop, namespace + key + '.'));
    }
  });
  return functions;
}

function getActionsArray(actionCreators) {
  if (Array.isArray(actionCreators)) return actionCreators;
  return flatTree(actionCreators);
}

/* eslint-disable no-new-func */
function evalAction(action, actionCreators) {
  if (typeof action === 'string') {
    return new Function('return ' + action)();
  }

  var actionCreator = actionCreators[action.selected].func;
  var interpretArg = function interpretArg(arg) {
    return new Function('return ' + arg)();
  };
  var argsToInject = action.args.map(interpretArg);
  if (action.rest) {
    var _argsToInject;

    var rest = interpretArg(action.rest);
    if (Array.isArray(rest)) argsToInject = (_argsToInject = argsToInject).concat.apply(_argsToInject, rest);else throw new Error('rest must be an array');
  }
  return actionCreator.apply(undefined, argsToInject);
}
/* eslint-enable */