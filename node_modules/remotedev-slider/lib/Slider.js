'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reflexbox = require('reflexbox');

var _Select = require('rebass/dist/Select');

var _Select2 = _interopRequireDefault(_Select);

var _Slider = require('rebass/dist/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _Button = require('rebass/dist/Button');

var _Button2 = _interopRequireDefault(_Button);

var _playArrow = require('react-icons/lib/md/play-arrow');

var _playArrow2 = _interopRequireDefault(_playArrow);

var _pause = require('react-icons/lib/md/pause');

var _pause2 = _interopRequireDefault(_pause);

var _keyboardArrowLeft = require('react-icons/lib/md/keyboard-arrow-left');

var _keyboardArrowLeft2 = _interopRequireDefault(_keyboardArrowLeft);

var _keyboardArrowRight = require('react-icons/lib/md/keyboard-arrow-right');

var _keyboardArrowRight2 = _interopRequireDefault(_keyboardArrowRight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var speedOptions = [{ children: '.5x', value: 500 }, { children: '1x', value: 1000 }, { children: '2x', value: 2000 }];

var SliderMonitor = function (_Component) {
  _inherits(SliderMonitor, _Component);

  function SliderMonitor() {
    var _temp, _this, _ret;

    _classCallCheck(this, SliderMonitor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      isPlaying: false,
      speed: 1000,
      index: undefined,
      waiting: false,
      reportId: ''
    }, _this.handleChange = function (e) {
      var index = e.target.value;
      if (_this.state.waiting) {
        clearTimeout(_this.waitingTimeout);
        _this.waitingTimeout = setTimeout(function () {
          _this.handleSlider(index);
        }, 500);
        _this.setState({ index: index });
        return;
      }
      _this.handleSlider(index);
    }, _this.handlePrev = function () {
      if (_this.props.liftedState.currentStateIndex < 1) return;
      _this.jumpToState(_this.props.liftedState.currentStateIndex - 1);
    }, _this.handleNext = function () {
      var liftedState = _this.props.liftedState;
      if (liftedState.currentStateIndex === liftedState.computedStates.length - 1) return;
      _this.jumpToState(_this.props.liftedState.currentStateIndex + 1);
    }, _this.handleArrows = function (e) {
      if (e.nativeEvent.key === 'ArrowLeft') {
        e.preventDefault();_this.handlePrev();
      } else if (e.nativeEvent.key === 'ArrowRight') {
        e.preventDefault();_this.handleNext();
      }
    }, _this.handleMouseDown = function () {
      _this.setState({ waiting: true });
    }, _this.handleMouseUp = function (e) {
      clearTimeout(_this.waitingTimeout);
      _this.handleSlider(e.target.value);
      _this.setState({ waiting: false, index: undefined });
    }, _this.handlePlay = function () {
      if (_this.state.isPlaying) {
        _this.dismissPlay();
        return;
      }

      var speed = _this.state.speed;

      var lastIndex = _this.props.liftedState.computedStates.length - 1;
      var index = _this.props.liftedState.currentStateIndex;
      if (index === lastIndex) index = -1;
      _this.timer = setInterval(function () {
        index++;
        if (index <= lastIndex) _this.jumpToState(index, true);
        if (index >= lastIndex) _this.dismissPlay();
      }, speed);
      _this.setState({ isPlaying: true });
    }, _this.handleSpeedChange = function (e) {
      _this.setState({ speed: e.target.value });
      if (_this.state.isPlaying) _this.dismissPlay();
    }, _this.handleReportChange = function (e) {
      var reportId = e.target.value;
      _this.setState({ reportId: reportId });
      if (!reportId) return;
      var getReport = _this.props.getReport;
      if (getReport) {
        getReport(reportId);
      } else {
        var report = _this.props.reports.find(function (r) {
          return r.id === reportId;
        });
        if (!report || !report.payload) return;
        var nextLiftedState = report.payload;
        if (typeof nextLiftedState === 'string') nextLiftedState = JSON.parse(nextLiftedState);
        var preloadedState = report.preloadedState;
        if (typeof preloadedState === 'string') preloadedState = JSON.parse(preloadedState);
        _this.props.dispatch({ type: 'IMPORT_STATE', nextLiftedState: nextLiftedState, preloadedState: preloadedState });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  SliderMonitor.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    var currentStateIndex = this.props.liftedState.currentStateIndex;
    var nextStateIndex = nextProps.liftedState.currentStateIndex;
    return nextState !== this.state || nextProps.showActions !== this.props.showActions || nextStateIndex !== currentStateIndex && (nextProps.showActions || currentStateIndex < 1 || nextStateIndex < 1) || nextStateIndex !== nextProps.liftedState.computedStates.length - 1 || currentStateIndex !== this.props.liftedState.computedStates.length - 1 || nextProps.reports !== this.props.reports;
  };

  SliderMonitor.prototype.getValue = function getValue(currentStateIndex, computedStates) {
    if (this.state.waiting) {
      var index = this.state.index;
      if (typeof index !== 'undefined') return index;
    }
    return computedStates.length < 2 ? 100 : currentStateIndex / (computedStates.length - 1) * 100;
  };

  SliderMonitor.prototype.jumpToState = function jumpToState(index, fromPlaying) {
    if (!fromPlaying && this.state.isPlaying) this.dismissPlay();
    this.props.dispatch({
      type: 'JUMP_TO_STATE',
      actionId: this.props.liftedState.stagedActionIds[index],
      index: index
    });
  };

  SliderMonitor.prototype.handleSlider = function handleSlider(index) {
    var limit = this.props.liftedState.computedStates.length - 1;
    if (limit < 1) return;
    var value = index / 100 * limit;
    if (value > this.props.liftedState.currentStateIndex) {
      value = Math.ceil(value);
    } else {
      value = Math.floor(value);
    }
    this.jumpToState(value);
  };

  SliderMonitor.prototype.dismissPlay = function dismissPlay() {
    clearInterval(this.timer);
    this.setState({ isPlaying: false });
  };

  SliderMonitor.prototype.render = function render() {
    var _props$liftedState = this.props.liftedState;
    var currentStateIndex = _props$liftedState.currentStateIndex;
    var computedStates = _props$liftedState.computedStates;

    var showActions = this.props.showActions && currentStateIndex !== -1;
    var value = this.getValue(currentStateIndex, computedStates);
    var isEnd = value === 100;
    var isBegin = value === 0 || currentStateIndex <= 0;
    var label = '';

    if (showActions) {
      var _props$liftedState2 = this.props.liftedState;
      var actionsById = _props$liftedState2.actionsById;
      var stagedActionIds = _props$liftedState2.stagedActionIds;

      label = actionsById[stagedActionIds[currentStateIndex]].action.type;
    }

    var reports = this.props.reports;
    var reportsOptions = void 0;
    if (reports && reports.length) {
      reportsOptions = [{ children: 'Current log', value: '' }].concat(reports.map(function (report) {
        return { children: report.title, value: report.id };
      }));
    }

    return _react2.default.createElement(
      _reflexbox.Flex,
      { style: this.props.style, align: 'center' },
      _react2.default.createElement(
        _reflexbox.Box,
        null,
        _react2.default.createElement(
          _Button2.default,
          { backgroundColor: 'transparent', p: 0, onClick: this.handlePlay },
          this.state.isPlaying ? _react2.default.createElement(_pause2.default, { size: 38 }) : _react2.default.createElement(_playArrow2.default, { size: 38 })
        )
      ),
      _react2.default.createElement(
        _reflexbox.Box,
        { flexAuto: true, px: 1, style: { overflow: 'hidden' } },
        _react2.default.createElement(_Slider2.default, {
          label: label,
          value: value,
          onChange: this.handleChange,
          onKeyDown: this.handleArrows,
          onMouseDown: this.handleMouseDown,
          onMouseUp: this.handleMouseUp,
          name: 'slider-monitor',
          fill: true, color: this.props.fillColor,
          style: {
            overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis',
            paddingBottom: showActions ? '13px' : '0px'
          }
        })
      ),
      _react2.default.createElement(
        _reflexbox.Box,
        null,
        _react2.default.createElement(
          _Button2.default,
          {
            backgroundColor: 'transparent', p: 0, disabled: isBegin,
            onClick: this.handlePrev
          },
          _react2.default.createElement(_keyboardArrowLeft2.default, { size: 36 })
        )
      ),
      _react2.default.createElement(
        _reflexbox.Box,
        null,
        _react2.default.createElement(
          _Button2.default,
          {
            backgroundColor: 'transparent', p: 0, disabled: isEnd,
            onClick: this.handleNext
          },
          _react2.default.createElement(_keyboardArrowRight2.default, { size: 36 })
        )
      ),
      _react2.default.createElement(
        _reflexbox.Box,
        null,
        _react2.default.createElement(_Select2.default, {
          label: '', name: 'select_speed',
          options: speedOptions,
          value: this.state.speed,
          onChange: this.handleSpeedChange,
          style: { marginBottom: '0px' }
        })
      ),
      reportsOptions && _react2.default.createElement(
        _reflexbox.Box,
        { p: 1 },
        _react2.default.createElement(_Select2.default, {
          label: '', name: 'select_report',
          options: reportsOptions,
          value: this.state.reportId,
          onChange: this.handleReportChange,
          style: { marginBottom: '0px' }
        })
      )
    );
  };

  return SliderMonitor;
}(_react.Component);

exports.default = SliderMonitor;


SliderMonitor.propTypes = {
  showActions: _react.PropTypes.bool,
  dispatch: _react.PropTypes.func,
  liftedState: _react.PropTypes.shape({
    computedStates: _react.PropTypes.array,
    stagedActionIds: _react.PropTypes.array,
    actionsById: _react.PropTypes.object,
    currentStateIndex: _react.PropTypes.number
  }).isRequired,
  reports: _react.PropTypes.array,
  getReport: _react.PropTypes.func,
  style: _react.PropTypes.object,
  fillColor: _react.PropTypes.string
};