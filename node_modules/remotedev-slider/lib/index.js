'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Slider = require('./Slider');

var _Slider2 = _interopRequireDefault(_Slider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RemotedevSlider = function (_Component) {
  _inherits(RemotedevSlider, _Component);

  function RemotedevSlider() {
    _classCallCheck(this, RemotedevSlider);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  RemotedevSlider.prototype.render = function render() {
    var _props = this.props;
    var computedStates = _props.computedStates;
    var stagedActionIds = _props.stagedActionIds;
    var actionsById = _props.actionsById;
    var currentStateIndex = _props.currentStateIndex;
    var dispatch = _props.dispatch;
    var showActions = _props.showActions;
    var reports = _props.reports;
    var getReport = _props.getReport;
    var style = _props.style;
    var fillColor = _props.fillColor;

    var liftedState = { computedStates: computedStates, stagedActionIds: stagedActionIds, actionsById: actionsById, currentStateIndex: currentStateIndex };

    return _react2.default.createElement(_Slider2.default, {
      liftedState: liftedState,
      dispatch: dispatch,
      showActions: showActions,
      reports: reports,
      getReport: getReport,
      style: style,
      fillColor: fillColor
    });
  };

  return RemotedevSlider;
}(_react.Component);

RemotedevSlider.update = function () {
  return {};
};

exports.default = RemotedevSlider;


RemotedevSlider.propTypes = {
  showActions: _react.PropTypes.bool,
  dispatch: _react.PropTypes.func,
  computedStates: _react.PropTypes.array,
  stagedActionIds: _react.PropTypes.array,
  actionsById: _react.PropTypes.object,
  currentStateIndex: _react.PropTypes.number,
  reports: _react.PropTypes.array,
  getReport: _react.PropTypes.func,
  style: _react.PropTypes.object,
  fillColor: _react.PropTypes.string
};