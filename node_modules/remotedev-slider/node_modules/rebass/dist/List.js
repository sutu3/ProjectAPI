'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/** List component that accepts any child component item types */

var List = function List(_ref) {
  var ordered = _ref.ordered;
  var reset = _ref.reset;
  var flush = _ref.flush;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;
  var children = _ref.children;

  var props = _objectWithoutProperties(_ref, ['ordered', 'reset', 'flush', 'className', 'style', 'theme', 'subComponentStyles', 'children']);

  var scale = theme.scale;

  var Comp = ordered ? 'ol' : 'ul';
  var cx = (0, _classnames2.default)('List', className);

  flush = flush || reset;

  var sx = {
    root: {
      paddingLeft: flush ? 0 : scale[2],
      margin: 0,
      listStyle: reset ? 'none' : null
    },
    item: {
      marginBottom: scale[1]
    }
  };

  var wrappedChildren = _react2.default.Children.map(children, function (child) {
    if (child.type === 'li') {
      return child;
    }

    return _react2.default.createElement(
      'li',
      { style: sx.item },
      child
    );
  });

  return _react2.default.createElement(
    Comp,
    _extends({}, props, {
      className: cx,
      style: sx.root }),
    wrappedChildren
  );
};

List.propTypes = {
  /** Changes the root component to an ordered list */
  ordered: _react2.default.PropTypes.bool,
  /** Removes padding left to keep text flush-left */
  flush: _react2.default.PropTypes.bool,
  /** Removes list styling */
  reset: _react2.default.PropTypes.bool
};

List._name = 'List';

exports.default = (0, _withRebass2.default)(List);