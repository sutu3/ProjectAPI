'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _Text = require('./Text');

var _Text2 = _interopRequireDefault(_Text);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Textarea form element with label
 */

var Textarea = function Textarea(_ref) {
  var label = _ref.label;
  var name = _ref.name;
  var message = _ref.message;
  var hideLabel = _ref.hideLabel;
  var horizontal = _ref.horizontal;
  var baseRef = _ref.baseRef;
  var children = _ref.children;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['label', 'name', 'message', 'hideLabel', 'horizontal', 'baseRef', 'children', 'className', 'style', 'theme', 'subComponentStyles']);

  var scale = theme.scale;
  var colors = theme.colors;
  var borderColor = theme.borderColor;
  var borderRadius = theme.borderRadius;


  var invalid = props['aria-invalid'] || props.invalid;

  var cx = (0, _classnames2.default)('Textarea', className, {
    'isInvalid': invalid,
    'isDisabled': props.disabled,
    'isReadonly': props.readOnly
  });

  var color = style.color;
  var backgroundColor = style.backgroundColor;

  var rootStyle = _objectWithoutProperties(style, ['color', 'backgroundColor']);

  var sx = {
    root: _extends({
      display: horizontal ? 'flex' : null,
      alignItems: horizontal ? 'baseline' : null,
      marginBottom: scale[2],
      color: invalid ? colors.error : null
    }, rootStyle),
    label: _extends({
      minWidth: horizontal ? 96 : null,
      paddingRight: horizontal ? scale[1] : null
    }, subComponentStyles.label),
    textarea: _extends({
      fontFamily: 'inherit',
      fontSize: 'inherit',
      boxSizing: 'border-box',
      display: 'block',
      flex: horizontal ? '1 1 auto' : null,
      width: '100%',
      padding: scale[1],
      color: color || 'inherit',
      backgroundColor: backgroundColor || colors.lighten,
      borderWidth: 1,
      borderStyles: 'solid',
      borderColor: borderColor,
      borderRadius: borderRadius,
      boxShadow: 'none',
      WebkitAppearance: 'none',
      appearance: 'none'
    }, subComponentStyles.textarea),
    message: _extends({
      paddingLeft: horizontal ? scale[1] : null
    }, subComponentStyles.message)
  };

  return _react2.default.createElement(
    'div',
    {
      className: cx,
      style: sx.root },
    _react2.default.createElement(_Label2.default, {
      htmlFor: name,
      hide: hideLabel,
      style: sx.label,
      children: label }),
    _react2.default.createElement('textarea', _extends({}, props, {
      ref: baseRef,
      name: name,
      style: sx.textarea })),
    message && _react2.default.createElement(_Text2.default, {
      small: true,
      style: sx.message,
      children: message })
  );
};

Textarea.propTypes = {
  /** Label for form element */
  label: _react2.default.PropTypes.string.isRequired,
  /** Name attribute for form element */
  name: _react2.default.PropTypes.string.isRequired,
  /** Adds a helper or error message below the textarea */
  message: _react2.default.PropTypes.string,
  /** Hides the form element label */
  hideLabel: _react2.default.PropTypes.bool,
  /** Displays label to the left */
  horizontal: _react2.default.PropTypes.bool,
  /** Adds a ref to the textarea element */
  baseRef: _react2.default.PropTypes.func
};

Textarea._name = 'Textarea';

exports.default = (0, _withRebass2.default)(Textarea);