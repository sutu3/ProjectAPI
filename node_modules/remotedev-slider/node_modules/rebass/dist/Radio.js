'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Styled custom radio input with label
 */

var Radio = function Radio(_ref) {
  var label = _ref.label;
  var name = _ref.name;
  var checked = _ref.checked;
  var children = _ref.children;
  var stacked = _ref.stacked;
  var baseRef = _ref.baseRef;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['label', 'name', 'checked', 'children', 'stacked', 'baseRef', 'className', 'style', 'theme', 'subComponentStyles']);

  var scale = theme.scale;
  var colors = theme.colors;


  var invalid = props['aria-invalid'] || props.invalid;

  var cx = (0, _classnames2.default)('Radio', className, {
    'isInvalid': invalid,
    'isDisabled': props.disabled,
    'isReadonly': props.readOnly
  });

  var backgroundColor = style.backgroundColor;

  var rootStyle = _objectWithoutProperties(style, ['backgroundColor']);

  var sx = {
    root: _extends({
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      flexDirection: stacked ? 'column' : null,
      paddingBottom: scale[1],
      color: invalid ? colors.error : null,
      cursor: 'pointer'
    }, rootStyle),
    input: _extends({
      position: 'absolute',
      zIndex: -1,
      opacity: 0
    }, subComponentStyles.input),
    dot: _extends({
      boxSizing: 'border-box',
      width: scale[2],
      height: scale[2],
      marginRight: stacked ? null : scale[1],
      marginBottom: stacked ? scale[1] : null,
      backgroundColor: checked ? colors.white : 'currentcolor',
      borderWidth: 5,
      borderStyle: checked ? 'solid' : null,
      borderColor: checked ? 'currentcolor' : null,
      borderRadius: 99999,
      opacity: checked ? null : 1 / 4,
      transition: 'border .1s ease-out',
      color: backgroundColor || style.fill.backgroundColor
    }, subComponentStyles.dot)
  };

  return _react2.default.createElement(
    _Label2.default,
    {
      className: cx,
      style: sx.root },
    _react2.default.createElement('input', _extends({}, props, {
      ref: baseRef,
      name: name,
      checked: checked,
      type: 'radio',
      style: sx.input })),
    _react2.default.createElement('div', {
      className: 'Radio_dot',
      style: sx.dot }),
    label
  );
};

Radio.propTypes = {
  /** Label for form element */
  label: _react2.default.PropTypes.string.isRequired,
  /** Name attribute for form element */
  name: _react2.default.PropTypes.string.isRequired,
  /** Place label centered under the radio */
  stacked: _react2.default.PropTypes.bool,
  /** Adds a ref to the input element */
  baseRef: _react2.default.PropTypes.func
};

Radio._name = 'Radio';

exports.default = (0, _withRebass2.default)(Radio);