'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A general purpose outline style button element with customizable colors
 */

var ButtonOutline = function ButtonOutline(_ref) {
  var active = _ref.active;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['active', 'className', 'style', 'theme', 'subComponentStyles']);

  var colors = theme.colors;
  var borderRadius = theme.borderRadius;

  var cx = (0, _classnames2.default)('ButtonOutline', className);

  var _style$fill$backgroun = style.fill.backgroundColor;
  var backgroundColor = _style$fill$backgroun === undefined ? colors.primary : _style$fill$backgroun;


  var sx = _extends({
    backgroundColor: backgroundColor || 'transparent',
    boxShadow: 'inset 0 0 0 1px ' + backgroundColor,
    borderRadius: borderRadius
  }, active ? style.fill : {
    color: backgroundColor,
    backgroundColor: 'transparent'
  }, style);

  return _react2.default.createElement(_Button2.default, _extends({}, props, {
    circle: theme.circle,
    className: cx,
    style: sx }));
};

ButtonOutline.propTypes = {
  /** Pass an href prop to make the ButtonOutline an <a> tag instead of a <button> */
  href: _react2.default.PropTypes.string,
  /** Creates a larger button */
  big: _react2.default.PropTypes.bool
};

ButtonOutline._name = 'ButtonOutline';

exports.default = (0, _withRebass2.default)(ButtonOutline);