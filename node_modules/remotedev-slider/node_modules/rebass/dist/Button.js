'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A general purpose button element with customizable colors
 */

var Button = function Button(_ref) {
  var href = _ref.href;
  var big = _ref.big;
  var size = _ref.size;
  var baseRef = _ref.baseRef;
  var style = _ref.style;
  var className = _ref.className;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['href', 'big', 'size', 'baseRef', 'style', 'className', 'theme', 'subComponentStyles']);

  var fontSizes = theme.fontSizes;
  var bold = theme.bold;
  var scale = theme.scale;
  var colors = theme.colors;
  var borderRadius = theme.borderRadius;


  var Comp = href ? 'a' : 'button';

  var minHeight = size || scale[3];
  var width = theme.circle ? minHeight : null;
  var padx = theme.circle ? 0 : scale[2];
  var pady = big ? scale[2] : scale[1];

  var cx = (0, _classnames2.default)('Button', className);

  var fillStyles = style.fill;

  var sx = _extends({
    fontFamily: 'inherit',
    fontSize: fontSizes[5],
    fontWeight: bold,
    lineHeight: scale[2] + 'px',
    minHeight: minHeight,
    width: width,
    textDecoration: 'none',
    display: 'inline-block',
    margin: 0,
    paddingTop: pady,
    paddingBottom: pady,
    paddingLeft: padx,
    paddingRight: padx,
    cursor: 'pointer',
    border: 0,
    borderRadius: borderRadius,
    color: colors.white,
    backgroundColor: colors.primary
  }, fillStyles, style);

  return _react2.default.createElement(Comp, _extends({}, props, {
    ref: baseRef,
    href: href,
    className: cx,
    style: sx }));
};

Button.propTypes = {
  /** Pass an href prop to make the Button an <a> tag instead of a <button> */
  href: _react2.default.PropTypes.string,
  /** Creates a larger button by adding padding */
  big: _react2.default.PropTypes.bool,
  /** Sets height of button in pixels */
  size: _react2.default.PropTypes.number,
  /** Creates a circle shaped button */
  circle: _react2.default.PropTypes.bool,
  /** Adds a ref to the button element */
  baseRef: _react2.default.PropTypes.func
};

Button._name = 'Button';

exports.default = (0, _withRebass2.default)(Button);