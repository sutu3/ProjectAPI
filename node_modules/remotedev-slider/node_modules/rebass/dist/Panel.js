'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _PanelHeader = require('./PanelHeader');

var _PanelHeader2 = _interopRequireDefault(_PanelHeader);

var _PanelFooter = require('./PanelFooter');

var _PanelFooter2 = _interopRequireDefault(_PanelFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Panel for containing small pieces of information
 */

var Panel = function Panel(_ref) {
  var children = _ref.children;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['children', 'className', 'style', 'theme', 'subComponentStyles']);

  var scale = theme.scale;
  var colors = theme.colors;
  var borderRadius = theme.borderRadius;


  var cx = (0, _classnames2.default)('Panel', className);

  var fillStyle = _extends({
    color: colors.black,
    borderColor: colors.gray
  }, style.fill);

  var borderColor = fillStyle.borderColor;


  var sx = _extends({
    padding: scale[2],
    marginBottom: scale[2],
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: borderRadius,
    borderColor: borderColor || colors.primary,
    backgroundColor: colors.white
  }, style);

  var styledChildren = _react2.default.Children.map(children, function (child) {
    if (child.type === _PanelHeader2.default) {
      return _react2.default.cloneElement(child, {
        style: fillStyle
      });
    } else if (child.type === _PanelFooter2.default) {
      return _react2.default.cloneElement(child, {
        style: {
          borderColor: borderColor
        }
      });
    } else {
      return child;
    }
  });

  return _react2.default.createElement('div', _extends({}, props, {
    className: cx,
    style: sx,
    children: styledChildren }));
};

Panel._name = 'Panel';

exports.default = (0, _withRebass2.default)(Panel);