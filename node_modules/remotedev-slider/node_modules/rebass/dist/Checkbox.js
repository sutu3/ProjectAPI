'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Checkbox input with label
 */

var Checkbox = function Checkbox(_ref) {
  var label = _ref.label;
  var name = _ref.name;
  var checked = _ref.checked;
  var children = _ref.children;
  var stacked = _ref.stacked;
  var baseRef = _ref.baseRef;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['label', 'name', 'checked', 'children', 'stacked', 'baseRef', 'className', 'style', 'theme', 'subComponentStyles']);

  var scale = theme.scale;
  var colors = theme.colors;
  var borderRadius = theme.borderRadius;


  var invalid = props['aria-invalid'] || props.invalid;

  var color = style.color;
  var backgroundColor = style.backgroundColor;

  var rootStyle = _objectWithoutProperties(style, ['color', 'backgroundColor']);

  var sx = {
    root: _extends({
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      flexDirection: stacked ? 'column' : null,
      paddingBottom: scale[1],
      color: invalid ? colors.error : null,
      cursor: 'pointer'
    }, rootStyle),
    input: _extends({
      position: 'absolute',
      zIndex: -1,
      opacity: 0
    }, subComponentStyles.input),
    box: _extends({
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: scale[2],
      height: scale[2],
      marginRight: stacked ? null : scale[1],
      marginBottom: stacked ? scale[1] : null
    }, checked ? {
      color: color || style.fill.color || colors.white,
      backgroundColor: backgroundColor || style.fill.backgroundColor || colors.success,
      borderColor: backgroundColor || style.fill.borderColor || colors.success
    } : {
      borderColor: theme.borderColor
    }, {
      borderRadius: borderRadius,
      borderStyle: 'solid',
      borderWidth: 2,
      transition: 'background-color .1s ease-out'
    }, subComponentStyles.box),
    icon: _extends({
      display: checked ? null : 'none',
      width: '75%',
      height: '75%',
      marginTop: 1,
      fill: 'currentcolor'
    }, subComponentStyles.icon)
  };

  var cx = (0, _classnames2.default)('Checkbox', className, {
    'isInvalid': invalid,
    'isDisabled': props.disabled,
    'isReadonly': props.readOnly
  });

  return _react2.default.createElement(
    _Label2.default,
    {
      className: cx,
      style: sx.root },
    _react2.default.createElement('input', _extends({}, props, {
      ref: baseRef,
      name: name,
      type: 'checkbox',
      checked: checked,
      style: sx.input })),
    _react2.default.createElement(
      'div',
      {
        className: 'Checkbox_box',
        style: sx.box },
      _react2.default.createElement(
        'svg',
        {
          viewBox: '0 0 32 32',
          style: sx.icon },
        _react2.default.createElement('path', { d: 'M1 14 L5 10 L13 18 L27 4 L31 8 L13 26 z' })
      )
    ),
    label
  );
};

Checkbox.propTypes = {
  /** Label for form element */
  label: _react2.default.PropTypes.string.isRequired,
  /** Name attribute for form element */
  name: _react2.default.PropTypes.string.isRequired,
  /** Place label centered under the radio */
  stacked: _react2.default.PropTypes.bool,
  /** Adds a ref to the input element */
  baseRef: _react2.default.PropTypes.func
};

Checkbox._name = 'Checkbox';

exports.default = (0, _withRebass2.default)(Checkbox);