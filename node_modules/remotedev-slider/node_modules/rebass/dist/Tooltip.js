'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Styled tooltip that shows on hover
 */

var Tooltip = function Tooltip(_ref) {
  var title = _ref.title;
  var children = _ref.children;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['title', 'children', 'className', 'style', 'theme', 'subComponentStyles']);

  var fontSizes = theme.fontSizes;
  var scale = theme.scale;
  var colors = theme.colors;
  var borderRadius = theme.borderRadius;


  var cx = (0, _classnames2.default)('Tooltip', className);

  var css = '\n    .Tooltip_box { display: none }\n    .Tooltip:hover .Tooltip_box { display: block }\n  '.replace(/\n/g, '').replace(/\s\s+/g, ' ');

  var sx = {
    root: _extends({
      position: 'relative',
      display: 'inline-block',
      cursor: 'pointer'
    }, style),
    box: _extends({
      position: 'absolute',
      bottom: '100%',
      left: '50%',
      fontSize: fontSizes[6],
      whiteSpace: 'nowrap',
      paddingTop: scale[1] / 2,
      paddingBottom: scale[1] / 2,
      paddingLeft: scale[1],
      paddingRight: scale[1],
      borderRadius: borderRadius,
      transform: 'translate(-50%, -8px)',
      color: colors.white,
      backgroundColor: colors.black
    }, style.fill, subComponentStyles.box),
    arrow: _extends({
      position: 'absolute',
      top: '100%',
      left: '50%',
      border: '6px solid transparent',
      borderTopColor: style.fill.backgroundColor || style.backgroundColor || colors.black,
      transform: 'translate(-50%, 0)'
    }, subComponentStyles.box)
  };

  return _react2.default.createElement(
    'span',
    {
      className: cx,
      'aria-label': title,
      style: sx.root },
    _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: css } }),
    _react2.default.createElement(
      'div',
      _extends({}, props, {
        style: sx.box,
        className: 'Tooltip_box' }),
      title,
      _react2.default.createElement('div', { className: 'Tooltip_arrow', style: sx.arrow })
    ),
    children
  );
};

Tooltip.propTypes = {
  /** Text to display in tooltip */
  title: _react2.default.PropTypes.string
};

Tooltip._name = 'Tooltip';

exports.default = (0, _withRebass2.default)(Tooltip);