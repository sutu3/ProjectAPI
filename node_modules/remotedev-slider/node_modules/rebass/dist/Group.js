'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Wrapper component to control border radii and alignment of child button components
 */

var Group = function Group(_ref) {
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['className', 'style', 'theme', 'subComponentStyles']);

  var cx = (0, _classnames2.default)('Group', className);

  var sx = {
    root: _extends({
      display: 'flex',
      alignItems: 'center'
    }, style),
    child: {}
  };

  var children = _react2.default.Children.map(props.children, function (child, i) {
    var childProps = {};

    if (child.type === _index.Button || child.type === _index.ButtonOutline || child.type === _index.Input || child.type === _index.Select) {
      childProps.rounded = i === 0 ? 'left' : i === props.children.length - 1 ? 'right' : false;
    }

    if (child.type === _index.Input || child.type === _index.Select) {
      childProps.hideLabel = true;
      childProps.mb = 0;
    }

    if (child.type === _index.ButtonOutline || child.type === _index.Input || child.type === _index.Select) {
      childProps.style = _extends({}, child.props.style, {
        marginLeft: -1
      });
    }

    return _react2.default.cloneElement(child, childProps);
  });

  return _react2.default.createElement('div', _extends({}, props, {
    className: cx,
    style: sx.root,
    children: children
  }));
};

Group._name = 'Group';

exports.default = (0, _withRebass2.default)(Group);