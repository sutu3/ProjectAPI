'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withRebass = require('./withRebass');

var _withRebass2 = _interopRequireDefault(_withRebass);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Stylized range input with label
 */

var Slider = function Slider(_ref) {
  var label = _ref.label;
  var name = _ref.name;
  var fill = _ref.fill;
  var hideLabel = _ref.hideLabel;
  var horizontal = _ref.horizontal;
  var baseRef = _ref.baseRef;
  var children = _ref.children;
  var className = _ref.className;
  var style = _ref.style;
  var theme = _ref.theme;
  var subComponentStyles = _ref.subComponentStyles;

  var props = _objectWithoutProperties(_ref, ['label', 'name', 'fill', 'hideLabel', 'horizontal', 'baseRef', 'children', 'className', 'style', 'theme', 'subComponentStyles']);

  var scale = theme.scale;
  var colors = theme.colors;


  var max = props.max || 100;
  var min = props.min || 0;
  var percent = (props.value - min) / (max - min) * 100;

  var color = style.color;
  var backgroundColor = style.backgroundColor;

  var rootStyle = _objectWithoutProperties(style, ['color', 'backgroundColor']);

  var css = '\n    .Slider_input::-webkit-slider-thumb {\n      width: 24px;\n      height: 24px;\n      background-color: currentcolor;\n      border: 0;\n      border-radius: 999px;\n      -webkit-appearance: none;\n    }\n    .Slider_input::-moz-range-thumb {\n      width: 24px;\n      height: 24px;\n      background-color: currentcolor;\n      border: 0;\n      border-radius: 999px;\n    }\n  '.replace(/\n/g, '').replace(/\s\s+/g, ' ');

  var backgroundImage = fill ? 'linear-gradient(90deg, currentcolor, currentcolor ' + percent + '%, transparent ' + percent + '%)' : null;

  var cx = (0, _classnames2.default)('Slider', className);

  var _height$subComponentS = _extends({ height: 6 }, subComponentStyles.input);

  var height = _height$subComponentS.height;


  var sx = {
    root: _extends({
      display: horizontal ? 'flex' : null,
      alignItems: horizontal ? 'center' : null,
      paddingBottom: scale[2]
    }, rootStyle),
    label: _extends({
      minWidth: horizontal ? 96 : null,
      paddingRight: horizontal ? scale[1] : null
    }, subComponentStyles.label),
    input: _extends({
      boxSizing: 'border-box',
      display: 'block',
      width: '100%',
      flex: horizontal ? '1 1 auto' : null,
      margin: 0,
      marginTop: scale[2] - height / 2,
      marginBottom: scale[2] - height / 2,
      cursor: 'pointer',
      color: color || 'inherit',
      backgroundColor: backgroundColor || colors.gray,
      backgroundImage: backgroundImage,
      backgroundClip: 'content-box',
      height: height,
      borderRadius: 999,
      WebkitAppearance: 'none',
      appearance: 'none'
    }, subComponentStyles.input)
  };

  return _react2.default.createElement(
    'div',
    {
      className: cx,
      style: sx.root },
    _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: css } }),
    _react2.default.createElement(_Label2.default, {
      htmlFor: name,
      hide: hideLabel,
      style: sx.label,
      children: label }),
    _react2.default.createElement('input', _extends({}, props, {
      ref: baseRef,
      type: 'range',
      name: name,
      className: 'Slider_input',
      style: sx.input }))
  );
};

Slider.propTypes = {
  /** Label for form element */
  label: _react2.default.PropTypes.string.isRequired,
  /** Name attribute for form element */
  name: _react2.default.PropTypes.string.isRequired,
  /** Adds a fill color to the track - requires client-side JavaScript */
  fill: _react2.default.PropTypes.bool,
  /** Hides the form element label */
  hideLabel: _react2.default.PropTypes.bool,
  /** Displays label to the left */
  horizontal: _react2.default.PropTypes.bool,
  /** Adds a ref to the input element */
  baseRef: _react2.default.PropTypes.func
};

Slider._name = 'Slider';

exports.default = (0, _withRebass2.default)(Slider);