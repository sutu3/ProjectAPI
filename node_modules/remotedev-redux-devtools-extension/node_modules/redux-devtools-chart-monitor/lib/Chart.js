"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3StateVisualizer = require("d3-state-visualizer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var wrapperStyle = {
  width: '100%',
  height: '100%'
};

var Chart = /*#__PURE__*/function (_Component) {
  _inherits(Chart, _Component);

  var _super = _createSuper(Chart);

  function Chart() {
    var _this;

    _classCallCheck(this, Chart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "divRef", /*#__PURE__*/(0, _react.createRef)());

    return _this;
  }

  _createClass(Chart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          select = _this$props.select,
          state = _this$props.state,
          defaultIsVisible = _this$props.defaultIsVisible;
      this.renderChart = (0, _d3StateVisualizer.tree)(this.divRef.current, this.props);

      if (defaultIsVisible) {
        this.renderChart(select(state));
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var state = nextProps.state,
          select = nextProps.select,
          monitorState = nextProps.monitorState;

      if (monitorState.isVisible !== false) {
        this.renderChart(select(state));
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: wrapperStyle,
        ref: this.divRef
      });
    }
  }]);

  return Chart;
}(_react.Component);

_defineProperty(Chart, "propTypes", {
  state: _propTypes["default"].object,
  rootKeyName: _propTypes["default"].string,
  pushMethod: _propTypes["default"].oneOf(['push', 'unshift']),
  tree: _propTypes["default"].shape({
    name: _propTypes["default"].string,
    children: _propTypes["default"].array
  }),
  id: _propTypes["default"].string,
  style: _propTypes["default"].shape({
    node: _propTypes["default"].shape({
      colors: _propTypes["default"].shape({
        "default": _propTypes["default"].string,
        parent: _propTypes["default"].string,
        collapsed: _propTypes["default"].string
      }),
      radius: _propTypes["default"].number
    }),
    text: _propTypes["default"].shape({
      colors: _propTypes["default"].shape({
        "default": _propTypes["default"].string,
        hover: _propTypes["default"].string
      })
    }),
    link: _propTypes["default"].object
  }),
  size: _propTypes["default"].number,
  aspectRatio: _propTypes["default"].number,
  margin: _propTypes["default"].shape({
    top: _propTypes["default"].number,
    right: _propTypes["default"].number,
    bottom: _propTypes["default"].number,
    left: _propTypes["default"].number
  }),
  isSorted: _propTypes["default"].bool,
  heightBetweenNodesCoeff: _propTypes["default"].number,
  widthBetweenNodesCoeff: _propTypes["default"].number,
  transitionDuration: _propTypes["default"].number,
  onClickText: _propTypes["default"].func,
  tooltipOptions: _propTypes["default"].shape({
    disabled: _propTypes["default"].bool,
    left: _propTypes["default"].number,
    top: _propTypes["default"].number,
    offset: _propTypes["default"].shape({
      left: _propTypes["default"].number,
      top: _propTypes["default"].number
    }),
    indentationSize: _propTypes["default"].number,
    style: _propTypes["default"].object
  })
});

var _default = Chart;
exports["default"] = _default;